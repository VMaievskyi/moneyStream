[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for com.piramida:moneyStream:war:0.0.1-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.codehaus.mojo:tomcat-maven-plugin is missing. @ line 253, column 12
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-compiler-plugin is missing. @ line 246, column 12
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building moneyStream Maven Webapp 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.3:clean (default-clean) @ moneyStream ---
[INFO] Deleting file set: /media/New Volume/work/workspace/moneyStream/target (included: [**], excluded: [])
[INFO] 
[INFO] --- maven-resources-plugin:2.3:resources (default-resources) @ moneyStream ---
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] Copying 2 resources
[INFO] Copying 5 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.0.2:compile (default-compile) @ moneyStream ---
[INFO] Compiling 72 source files to /media/New Volume/work/workspace/moneyStream/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.3:testResources (default-testResources) @ moneyStream ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.0.2:testCompile (default-testCompile) @ moneyStream ---
[INFO] Compiling 10 source files to /media/New Volume/work/workspace/moneyStream/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.10:test (default-test) @ moneyStream ---
[INFO] Surefire report directory: /media/New Volume/work/workspace/moneyStream/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.piramida.security.PasswordGeneratorServiceTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.579 sec
Running com.piramida.security.SecurityStringGeneratorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.101 sec
Running com.piramida.facade.AccountFacadeTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.284 sec
Running com.piramida.facade.QueueFacadeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.012 sec
Running com.piramida.controller.AccountControllerTest
Dec 01, 2013 4:39:51 PM org.springframework.test.context.TestContextManager retrieveTestExecutionListeners
INFO: @TestExecutionListeners is not present for class [class com.piramida.controller.AccountControllerTest]: using defaults.
Dec 01, 2013 4:39:51 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [WEB-INF/appContext.xml]
Dec 01, 2013 4:39:51 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [WEB-INF/queueType.xml]
Dec 01, 2013 4:39:52 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.springframework.context.support.GenericApplicationContext@5d54e317: startup date [Sun Dec 01 16:39:52 EET 2013]; root of context hierarchy
Dec 01, 2013 4:39:52 PM org.springframework.core.io.support.PropertiesLoaderSupport loadProperties
INFO: Loading properties file from class path resource [database.config]
Dec 01, 2013 4:39:52 PM org.springframework.core.io.support.PropertiesLoaderSupport loadProperties
INFO: Loading properties file from class path resource [mail.config]
Dec 01, 2013 4:39:52 PM org.springframework.scheduling.concurrent.ExecutorConfigurationSupport initialize
INFO: Initializing ExecutorService  'myScheduler'
Dec 01, 2013 4:39:52 PM org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker postProcessAfterInitialization
INFO: Bean 'myScheduler' of type [class org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Dec 01, 2013 4:39:52 PM org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker postProcessAfterInitialization
INFO: Bean 'dataSource' of type [class org.apache.tomcat.dbcp.dbcp.BasicDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Dec 01, 2013 4:39:52 PM org.hibernate.annotations.common.Version <clinit>
INFO: HCANN000001: Hibernate Commons Annotations {4.0.2.Final}
Dec 01, 2013 4:39:52 PM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate Core {4.2.4.Final}
Dec 01, 2013 4:39:52 PM org.hibernate.cfg.Environment <clinit>
INFO: HHH000206: hibernate.properties not found
Dec 01, 2013 4:39:52 PM org.hibernate.cfg.Environment buildBytecodeProvider
INFO: HHH000021: Bytecode provider name : javassist
Dec 01, 2013 4:39:53 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Dec 01, 2013 4:39:53 PM org.hibernate.engine.jdbc.internal.LobCreatorBuilder useContextualLobCreation
INFO: HHH000423: Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
Dec 01, 2013 4:39:53 PM org.hibernate.engine.transaction.internal.TransactionFactoryInitiator initiateService
INFO: HHH000399: Using default transaction strategy (direct JDBC transactions)
Dec 01, 2013 4:39:53 PM org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory <init>
INFO: HHH000397: Using ASTQueryTranslatorFactory
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.SchemaValidator validate
INFO: HHH000229: Running schema validator
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.SchemaValidator validate
INFO: HHH000102: Fetching database metadata
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000261: Table found: hibnatedb.PendingQueue
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000037: Columns: [id, secureid, account_id, status, garantedqueue, queue_id, creationdate]
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000261: Table found: hibnatedb.Queue
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000037: Columns: [position, requiredpaymentcount, id, queuetype, account_id, status]
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000261: Table found: hibnatedb.Account
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000037: Columns: [id, activationstring, status, email, role, password]
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000261: Table found: hibnatedb.Wallet
Dec 01, 2013 4:39:53 PM org.hibernate.tool.hbm2ddl.TableMetadata <init>
INFO: HHH000037: Columns: [id, wallettype, waletnumber, owner]
Dec 01, 2013 4:39:53 PM org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker postProcessAfterInitialization
INFO: Bean 'sessionFactory' of type [class org.springframework.orm.hibernate4.LocalSessionFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Dec 01, 2013 4:39:53 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@414ad9fb: defining beans [C500,queueTypeHolder,org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,pendingQueueEntityMapper,pendingQueueListEntityMapper,lostPendingQueueCleaner,ticketFacade,pendingQueueFacade,queueFacade,walletFacadeImpl,adminController,walletController,accountController,queueController,pendinqQueueController,accountService,pendingQueueService,queueServiceImpl,walletServiceImpl,pendingQueueDao,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.validation.beanvalidation.LocalValidatorFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.context.annotation.internalAsyncAnnotationProcessor,org.springframework.context.annotation.internalScheduledAnnotationProcessor,myScheduler,abstractDtoEntityMapper,accountDtoEntityMapper,walletDtoEntityMapper,walletDtoListEntityMapper,mappersRegistry,mapperFactory,sessionFactory,dataSource,txManager,jacksonMessageChanger,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,persistenceExceptionTranslationPostProcessor,abstractDao,accountDao,queueDao,securityStringGenerator,passwordGeneratorService,mailService,templateMessage,mailSender,accountFacade,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/admin],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.MessageDto com.piramida.controller.AdminController.removeFromQueue(java.lang.Integer)
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/admin],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.MessageDto com.piramida.controller.AdminController.swapQueues(java.lang.Integer,java.lang.Integer)
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/admin],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.MessageDto com.piramida.controller.AdminController.putInQueueCheat(java.lang.String,java.lang.Integer)
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/admin/account],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.MessageDto com.piramida.controller.AdminController.createAdminAccount(com.piramida.entity.dto.AccountDto)
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/admin/receiptStatus],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.MessageDto com.piramida.controller.AdminController.manageReceiptStatus(java.lang.String,java.lang.String)
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/wallets],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public void com.piramida.controller.WalletController.addWalletsToAccount(com.piramida.entity.dto.WalletDtoList) throws com.piramida.controller.exception.AccountOperationException
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/account/activation/{activationString}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.MessageDto com.piramida.controller.AccountController.activateAccount(java.lang.String) throws com.piramida.controller.exception.AccountOperationException
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/account/new],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public void com.piramida.controller.AccountController.createAccount(com.piramida.entity.dto.AccountDto) throws com.piramida.controller.exception.AccountOperationException
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/queue/{queueType}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.MessageDto com.piramida.controller.QueueController.putInQueue(java.lang.String) throws com.piramida.controller.exception.BusinessException
Dec 01, 2013 4:39:54 PM org.springframework.web.servlet.handler.AbstractHandlerMethodMapping registerHandlerMethod
INFO: Mapped "{[/pendingQueue],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.piramida.entity.dto.PendingQueueDtoList com.piramida.controller.PendinqQueueController.getAllPendingQueues()
Dec 01, 2013 4:39:54 PM org.springframework.orm.hibernate4.HibernateTransactionManager afterPropertiesSet
INFO: Using DataSource [org.apache.tomcat.dbcp.dbcp.BasicDataSource@33aed797] of Hibernate SessionFactory for HibernateTransactionManager
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.095 sec
Running com.piramida.service.AccountServiceTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
Running com.piramida.service.QueueServiceTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.028 sec
Running com.piramida.dao.PendingQueueDaoTest
Dec 01, 2013 4:39:54 PM org.springframework.test.context.TestContextManager retrieveTestExecutionListeners
INFO: @TestExecutionListeners is not present for class [class com.piramida.dao.PendingQueueDaoTest]: using defaults.
Dec 01, 2013 4:39:54 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (1): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into PendingQueue (creationDate, GarantedQueue, Account_id, Queue_id, secureId, status) values (?, ?, ?, ?, ?, ?)
Hibernate: insert into PendingQueue (creationDate, GarantedQueue, Account_id, Queue_id, secureId, status) values (?, ?, ?, ?, ?, ?)
Hibernate: select pendingque0_.id as id1_0_, pendingque0_.creationDate as creation2_0_, pendingque0_.GarantedQueue as Garanted5_0_, pendingque0_.Account_id as Account_6_0_, pendingque0_.Queue_id as Queue_id7_0_, pendingque0_.secureId as secureId3_0_, pendingque0_.status as status4_0_ from PendingQueue pendingque0_ where pendingque0_.creationDate<?
Hibernate: select pendingque0_.id as id1_0_, pendingque0_.creationDate as creation2_0_, pendingque0_.GarantedQueue as Garanted5_0_, pendingque0_.Account_id as Account_6_0_, pendingque0_.Queue_id as Queue_id7_0_, pendingque0_.secureId as secureId3_0_, pendingque0_.status as status4_0_ from PendingQueue pendingque0_ where pendingque0_.creationDate<?
Hibernate: select queue0_.id as id1_1_2_, queue0_.Account_id as Account_6_1_2_, queue0_.position as position2_1_2_, queue0_.queueType as queueTyp3_1_2_, queue0_.requiredPaymentCount as required4_1_2_, queue0_.status as status5_1_2_, pendingque1_.Queue_id as Queue_id7_1_4_, pendingque1_.id as id1_0_4_, pendingque1_.id as id1_0_0_, pendingque1_.creationDate as creation2_0_0_, pendingque1_.GarantedQueue as Garanted5_0_0_, pendingque1_.Account_id as Account_6_0_0_, pendingque1_.Queue_id as Queue_id7_0_0_, pendingque1_.secureId as secureId3_0_0_, pendingque1_.status as status4_0_0_, queue2_.id as id1_1_1_, queue2_.Account_id as Account_6_1_1_, queue2_.position as position2_1_1_, queue2_.queueType as queueTyp3_1_1_, queue2_.requiredPaymentCount as required4_1_1_, queue2_.status as status5_1_1_ from Queue queue0_ left outer join PendingQueue pendingque1_ on queue0_.id=pendingque1_.Queue_id left outer join Queue queue2_ on pendingque1_.GarantedQueue=queue2_.id where queue0_.id=?
Hibernate: select pendingque0_.id as id1_0_2_, pendingque0_.creationDate as creation2_0_2_, pendingque0_.GarantedQueue as Garanted5_0_2_, pendingque0_.Account_id as Account_6_0_2_, pendingque0_.Queue_id as Queue_id7_0_2_, pendingque0_.secureId as secureId3_0_2_, pendingque0_.status as status4_0_2_, queue1_.id as id1_1_0_, queue1_.Account_id as Account_6_1_0_, queue1_.position as position2_1_0_, queue1_.queueType as queueTyp3_1_0_, queue1_.requiredPaymentCount as required4_1_0_, queue1_.status as status5_1_0_, pendingque2_.Queue_id as Queue_id7_1_4_, pendingque2_.id as id1_0_4_, pendingque2_.id as id1_0_1_, pendingque2_.creationDate as creation2_0_1_, pendingque2_.GarantedQueue as Garanted5_0_1_, pendingque2_.Account_id as Account_6_0_1_, pendingque2_.Queue_id as Queue_id7_0_1_, pendingque2_.secureId as secureId3_0_1_, pendingque2_.status as status4_0_1_ from PendingQueue pendingque0_ left outer join Queue queue1_ on pendingque0_.GarantedQueue=queue1_.id left outer join PendingQueue pendingque2_ on queue1_.id=pendingque2_.Queue_id where pendingque0_.GarantedQueue=?
Hibernate: select queue0_.id as id1_1_2_, queue0_.Account_id as Account_6_1_2_, queue0_.position as position2_1_2_, queue0_.queueType as queueTyp3_1_2_, queue0_.requiredPaymentCount as required4_1_2_, queue0_.status as status5_1_2_, pendingque1_.Queue_id as Queue_id7_1_4_, pendingque1_.id as id1_0_4_, pendingque1_.id as id1_0_0_, pendingque1_.creationDate as creation2_0_0_, pendingque1_.GarantedQueue as Garanted5_0_0_, pendingque1_.Account_id as Account_6_0_0_, pendingque1_.Queue_id as Queue_id7_0_0_, pendingque1_.secureId as secureId3_0_0_, pendingque1_.status as status4_0_0_, queue2_.id as id1_1_1_, queue2_.Account_id as Account_6_1_1_, queue2_.position as position2_1_1_, queue2_.queueType as queueTyp3_1_1_, queue2_.requiredPaymentCount as required4_1_1_, queue2_.status as status5_1_1_ from Queue queue0_ left outer join PendingQueue pendingque1_ on queue0_.id=pendingque1_.Queue_id left outer join Queue queue2_ on pendingque1_.GarantedQueue=queue2_.id where queue0_.id=?
Hibernate: select pendingque0_.id as id1_0_2_, pendingque0_.creationDate as creation2_0_2_, pendingque0_.GarantedQueue as Garanted5_0_2_, pendingque0_.Account_id as Account_6_0_2_, pendingque0_.Queue_id as Queue_id7_0_2_, pendingque0_.secureId as secureId3_0_2_, pendingque0_.status as status4_0_2_, queue1_.id as id1_1_0_, queue1_.Account_id as Account_6_1_0_, queue1_.position as position2_1_0_, queue1_.queueType as queueTyp3_1_0_, queue1_.requiredPaymentCount as required4_1_0_, queue1_.status as status5_1_0_, pendingque2_.Queue_id as Queue_id7_1_4_, pendingque2_.id as id1_0_4_, pendingque2_.id as id1_0_1_, pendingque2_.creationDate as creation2_0_1_, pendingque2_.GarantedQueue as Garanted5_0_1_, pendingque2_.Account_id as Account_6_0_1_, pendingque2_.Queue_id as Queue_id7_0_1_, pendingque2_.secureId as secureId3_0_1_, pendingque2_.status as status4_0_1_ from PendingQueue pendingque0_ left outer join Queue queue1_ on pendingque0_.GarantedQueue=queue1_.id left outer join PendingQueue pendingque2_ on queue1_.id=pendingque2_.Queue_id where pendingque0_.GarantedQueue=?
true
Hibernate: select queue0_.id as id1_1_2_, queue0_.Account_id as Account_6_1_2_, queue0_.position as position2_1_2_, queue0_.queueType as queueTyp3_1_2_, queue0_.requiredPaymentCount as required4_1_2_, queue0_.status as status5_1_2_, pendingque1_.Queue_id as Queue_id7_1_4_, pendingque1_.id as id1_0_4_, pendingque1_.id as id1_0_0_, pendingque1_.creationDate as creation2_0_0_, pendingque1_.GarantedQueue as Garanted5_0_0_, pendingque1_.Account_id as Account_6_0_0_, pendingque1_.Queue_id as Queue_id7_0_0_, pendingque1_.secureId as secureId3_0_0_, pendingque1_.status as status4_0_0_, queue2_.id as id1_1_1_, queue2_.Account_id as Account_6_1_1_, queue2_.position as position2_1_1_, queue2_.queueType as queueTyp3_1_1_, queue2_.requiredPaymentCount as required4_1_1_, queue2_.status as status5_1_1_ from Queue queue0_ left outer join PendingQueue pendingque1_ on queue0_.id=pendingque1_.Queue_id left outer join Queue queue2_ on pendingque1_.GarantedQueue=queue2_.id where queue0_.id=?
Hibernate: select pendingque0_.id as id1_0_2_, pendingque0_.creationDate as creation2_0_2_, pendingque0_.GarantedQueue as Garanted5_0_2_, pendingque0_.Account_id as Account_6_0_2_, pendingque0_.Queue_id as Queue_id7_0_2_, pendingque0_.secureId as secureId3_0_2_, pendingque0_.status as status4_0_2_, queue1_.id as id1_1_0_, queue1_.Account_id as Account_6_1_0_, queue1_.position as position2_1_0_, queue1_.queueType as queueTyp3_1_0_, queue1_.requiredPaymentCount as required4_1_0_, queue1_.status as status5_1_0_, pendingque2_.Queue_id as Queue_id7_1_4_, pendingque2_.id as id1_0_4_, pendingque2_.id as id1_0_1_, pendingque2_.creationDate as creation2_0_1_, pendingque2_.GarantedQueue as Garanted5_0_1_, pendingque2_.Account_id as Account_6_0_1_, pendingque2_.Queue_id as Queue_id7_0_1_, pendingque2_.secureId as secureId3_0_1_, pendingque2_.status as status4_0_1_ from PendingQueue pendingque0_ left outer join Queue queue1_ on pendingque0_.GarantedQueue=queue1_.id left outer join PendingQueue pendingque2_ on queue1_.id=pendingque2_.Queue_id where pendingque0_.GarantedQueue=?
Hibernate: select queue0_.id as id1_1_2_, queue0_.Account_id as Account_6_1_2_, queue0_.position as position2_1_2_, queue0_.queueType as queueTyp3_1_2_, queue0_.requiredPaymentCount as required4_1_2_, queue0_.status as status5_1_2_, pendingque1_.Queue_id as Queue_id7_1_4_, pendingque1_.id as id1_0_4_, pendingque1_.id as id1_0_0_, pendingque1_.creationDate as creation2_0_0_, pendingque1_.GarantedQueue as Garanted5_0_0_, pendingque1_.Account_id as Account_6_0_0_, pendingque1_.Queue_id as Queue_id7_0_0_, pendingque1_.secureId as secureId3_0_0_, pendingque1_.status as status4_0_0_, queue2_.id as id1_1_1_, queue2_.Account_id as Account_6_1_1_, queue2_.position as position2_1_1_, queue2_.queueType as queueTyp3_1_1_, queue2_.requiredPaymentCount as required4_1_1_, queue2_.status as status5_1_1_ from Queue queue0_ left outer join PendingQueue pendingque1_ on queue0_.id=pendingque1_.Queue_id left outer join Queue queue2_ on pendingque1_.GarantedQueue=queue2_.id where queue0_.id=?
Hibernate: select pendingque0_.id as id1_0_2_, pendingque0_.creationDate as creation2_0_2_, pendingque0_.GarantedQueue as Garanted5_0_2_, pendingque0_.Account_id as Account_6_0_2_, pendingque0_.Queue_id as Queue_id7_0_2_, pendingque0_.secureId as secureId3_0_2_, pendingque0_.status as status4_0_2_, queue1_.id as id1_1_0_, queue1_.Account_id as Account_6_1_0_, queue1_.position as position2_1_0_, queue1_.queueType as queueTyp3_1_0_, queue1_.requiredPaymentCount as required4_1_0_, queue1_.status as status5_1_0_, pendingque2_.Queue_id as Queue_id7_1_4_, pendingque2_.id as id1_0_4_, pendingque2_.id as id1_0_1_, pendingque2_.creationDate as creation2_0_1_, pendingque2_.GarantedQueue as Garanted5_0_1_, pendingque2_.Account_id as Account_6_0_1_, pendingque2_.Queue_id as Queue_id7_0_1_, pendingque2_.secureId as secureId3_0_1_, pendingque2_.status as status4_0_1_ from PendingQueue pendingque0_ left outer join Queue queue1_ on pendingque0_.GarantedQueue=queue1_.id left outer join PendingQueue pendingque2_ on queue1_.id=pendingque2_.Queue_id where pendingque0_.GarantedQueue=?
[com.piramida.entity.PendingQueue@46eb7e87]
Hibernate: delete from PendingQueue where id=?
Hibernate: delete from Queue where id=?
Dec 01, 2013 4:39:54 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@14af3b51 testClass = PendingQueueDaoTest, testInstance = com.piramida.dao.PendingQueueDaoTest@7c5f4d72, testMethod = shouldDeleteOldQueues@PendingQueueDaoTest, testException = junit.framework.AssertionFailedError: wrong pendingQueue returns expected:<Sun Dec 01 13:39:54 EET 2013> but was:<2013-11-27 00:38:18.0>, mergedContextConfiguration = [MergedContextConfiguration@54d5b728 testClass = PendingQueueDaoTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.468 sec <<< FAILURE!
Running com.piramida.dao.BasicQueueOperationsTest
Dec 01, 2013 4:39:54 PM org.springframework.test.context.TestContextManager retrieveTestExecutionListeners
INFO: @TestExecutionListeners is not present for class [class com.piramida.dao.BasicQueueOperationsTest]: using defaults.
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (1): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ order by queue0_.position
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@a38e3c7, testMethod = shouldDeleteAll@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (2): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ order by queue0_.position
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@61f98673, testMethod = shouldAddAccountIntoQueue@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (3): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: delete from Queue where id=?
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ order by queue0_.position
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@7f8d6a14, testMethod = shouldDelete@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (4): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: update Queue set Account_id=?, position=?, queueType=?, requiredPaymentCount=?, status=? where id=?
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ order by queue0_.position
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@63a0edb8, testMethod = shouldUpdateQueue@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (5): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ where queue0_.queueType=? and (select count(pendingque1_.Queue_id) from PendingQueue pendingque1_ where queue0_.id=pendingque1_.Queue_id)<queue0_.requiredPaymentCount and queue0_.status=? limit ?
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@7b27bcfd, testMethod = shouldFindFirstRowInActiveStatus@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (6): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: select queue0_.id as id1_1_2_, queue0_.Account_id as Account_6_1_2_, queue0_.position as position2_1_2_, queue0_.queueType as queueTyp3_1_2_, queue0_.requiredPaymentCount as required4_1_2_, queue0_.status as status5_1_2_, pendingque1_.Queue_id as Queue_id7_1_4_, pendingque1_.id as id1_0_4_, pendingque1_.id as id1_0_0_, pendingque1_.creationDate as creation2_0_0_, pendingque1_.GarantedQueue as Garanted5_0_0_, pendingque1_.Account_id as Account_6_0_0_, pendingque1_.Queue_id as Queue_id7_0_0_, pendingque1_.secureId as secureId3_0_0_, pendingque1_.status as status4_0_0_, pendingque2_.id as id1_0_1_, pendingque2_.creationDate as creation2_0_1_, pendingque2_.GarantedQueue as Garanted5_0_1_, pendingque2_.Account_id as Account_6_0_1_, pendingque2_.Queue_id as Queue_id7_0_1_, pendingque2_.secureId as secureId3_0_1_, pendingque2_.status as status4_0_1_ from Queue queue0_ left outer join PendingQueue pendingque1_ on queue0_.id=pendingque1_.Queue_id left outer join PendingQueue pendingque2_ on queue0_.id=pendingque2_.GarantedQueue where queue0_.id=?
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: select queue0_.id as id1_1_2_, queue0_.Account_id as Account_6_1_2_, queue0_.position as position2_1_2_, queue0_.queueType as queueTyp3_1_2_, queue0_.requiredPaymentCount as required4_1_2_, queue0_.status as status5_1_2_, pendingque1_.Queue_id as Queue_id7_1_4_, pendingque1_.id as id1_0_4_, pendingque1_.id as id1_0_0_, pendingque1_.creationDate as creation2_0_0_, pendingque1_.GarantedQueue as Garanted5_0_0_, pendingque1_.Account_id as Account_6_0_0_, pendingque1_.Queue_id as Queue_id7_0_0_, pendingque1_.secureId as secureId3_0_0_, pendingque1_.status as status4_0_0_, pendingque2_.id as id1_0_1_, pendingque2_.creationDate as creation2_0_1_, pendingque2_.GarantedQueue as Garanted5_0_1_, pendingque2_.Account_id as Account_6_0_1_, pendingque2_.Queue_id as Queue_id7_0_1_, pendingque2_.secureId as secureId3_0_1_, pendingque2_.status as status4_0_1_ from Queue queue0_ left outer join PendingQueue pendingque1_ on queue0_.id=pendingque1_.Queue_id left outer join PendingQueue pendingque2_ on queue0_.id=pendingque2_.GarantedQueue where queue0_.id=?
Hibernate: update Queue set Account_id=?, position=?, queueType=?, requiredPaymentCount=?, status=? where id=?
Hibernate: update Queue set Account_id=?, position=?, queueType=?, requiredPaymentCount=?, status=? where id=?
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ where queue0_.id=?
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@36834e8, testMethod = shouldSwapPositions@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (7): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ limit ?, ?
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@47122db7, testMethod = shouldSelectRowsInRange@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (8): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from Queue
Hibernate: insert into Queue (Account_id, position, queueType, requiredPaymentCount, status) values (?, ?, ?, ?, ?)
Hibernate: select queue0_.id as id1_1_, queue0_.Account_id as Account_6_1_, queue0_.position as position2_1_, queue0_.queueType as queueTyp3_1_, queue0_.requiredPaymentCount as required4_1_, queue0_.status as status5_1_ from Queue queue0_ where queue0_.id=?
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@49b30d76 testClass = BasicQueueOperationsTest, testInstance = com.piramida.dao.BasicQueueOperationsTest@7f22cd5c, testMethod = shouldFindById@BasicQueueOperationsTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1cf2230f testClass = BasicQueueOperationsTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.453 sec
Running com.piramida.dao.BasicAccountOperationTest
Dec 01, 2013 4:39:55 PM org.springframework.test.context.TestContextManager retrieveTestExecutionListeners
INFO: @TestExecutionListeners is not present for class [class com.piramida.dao.BasicAccountOperationTest]: using defaults.
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (1): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_ where account0_.email=?
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@7d830a72, testMethod = shouldFindAccountByEmail@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (2): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@73af29f8, testMethod = shouldWipeAllAccounts@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (3): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@6c5c3528, testMethod = shouldCreateNewAccount@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (4): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@1379303c, testMethod = shouldFindAtLeastOneAccount@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (5): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Hibernate: insert into hibnatedb.Wallet (owner, waletNumber, walletType) values (?, ?, ?)
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@36edd056, testMethod = shouldSaveAccountWithWallet@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (6): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Hibernate: delete from hibnatedb.Account where id=?
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@4456ba0d, testMethod = shouldDeleteConcreteAccount@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (7): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Hibernate: insert into hibnatedb.Wallet (owner, waletNumber, walletType) values (?, ?, ?)
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_ where account0_.email=?
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@1da25a67, testMethod = shouldDeleteWallet@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener startNewTransaction
INFO: Began transaction (8): transaction manager [org.springframework.orm.hibernate4.HibernateTransactionManager@1785ed6e]; rollback [true]
Hibernate: delete from hibnatedb.Account
Hibernate: insert into hibnatedb.Account (activationString, email, password, role, status) values (?, ?, ?, ?, ?)
Hibernate: select account0_.id as id1_2_, account0_.activationString as activati2_2_, account0_.email as email3_2_, account0_.password as password4_2_, account0_.role as role5_2_, account0_.status as status6_2_ from hibnatedb.Account account0_ where account0_.activationString='activationString'
Dec 01, 2013 4:39:55 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction
INFO: Rolled back transaction after test execution for test context [[TestContext@5ca59f62 testClass = BasicAccountOperationTest, testInstance = com.piramida.dao.BasicAccountOperationTest@3791634, testMethod = shouldFindAccountByActivationString@BasicAccountOperationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@262302be testClass = BasicAccountOperationTest, locations = '{classpath:/WEB-INF/appContext.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.346 sec
Dec 01, 2013 4:39:55 PM org.springframework.context.support.AbstractApplicationContext doClose
INFO: Closing org.springframework.context.support.GenericApplicationContext@5d54e317: startup date [Sun Dec 01 16:39:52 EET 2013]; root of context hierarchy

Results :

Failed tests:   shouldDeleteOldQueues(com.piramida.dao.PendingQueueDaoTest): wrong pendingQueue returns expected:<Sun Dec 01 13:39:54 EET 2013> but was:<2013-11-27 00:38:18.0>

Tests run: 44, Failures: 1, Errors: 0, Skipped: 2

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9.576s
[INFO] Finished at: Sun Dec 01 16:39:55 EET 2013
[INFO] Final Memory: 23M/263M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.10:test (default-test) on project moneyStream: There are test failures.
[ERROR] 
[ERROR] Please refer to /media/New Volume/work/workspace/moneyStream/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
